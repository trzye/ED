dane <- read.table("zestaw_22.dat")
#Sprawdzam czy dane trzeba znormalizowac
minima = najmniejsze(dane, opis=c(1,2,3,4,5,6,7,8,9))
zmiennosc = sd(minima)/mean(minima)
#Zmiennosc wyniosla -0.47 więc powinniśmy znormalizować
dane=normalizuj(dane)
#Podział danych na uczące i testowe
podzial = podziel(dane, p=0.5)
#Wybrane atrybuty opisujące
atr=c(5,9, 4)
#Weryfikacja: klasyfikator k-najbliższych sąsiadów - k=1
weryfikuj('knn', dane, podzial, atr, k=1)
#Weryfikacja: klasyfikator k-najbliższych sąsiadów - k=3
weryfikuj('knn', dane, podzial, atr, k=3)
#Weryfikacja: klasyfikator k-najbliższych sąsiadów - k=9
weryfikuj('knn', dane, podzial, atr, k=9)
#Weryfikacja: drzewo decyzyjne - k=50
weryfikuj('drzewo', dane, podzial, atr, k=75)
#Weryfikacja: drzewo decyzyjne - k=10
weryfikuj('drzewo', dane, podzial, atr, k=50)
#Weryfikacja: drzewo decyzyjne - k=1
weryfikuj('drzewo', dane, podzial, atr, k=1)
#Weryfikacja: klasyfikator najbliższego prototypu
weryfikuj('np', dane, podzial, atr, k=1)
#Weryfikacja: naiwny klasyfikator Bayesa
weryfikuj('bayes', dane, podzial, atr, k=1)
#Histogram z ilością błędnych klasyfikacji
pokaz(dane, opis=c(3,7))
pokaz(dane)
#Przygotowanie
source('E:/Users/Michal/Git/ED/eksplo.R')
dane <- read.table("zestaw_22.dat")
#Sprawdzam czy dane trzeba znormalizowac
minima = najmniejsze(dane, opis=c(1,2,3,4,5,6,7,8,9))
zmiennosc = sd(minima)/mean(minima)
#Zmiennosc wyniosla -0.47 więc powinniśmy znormalizować
dane=normalizuj(dane)
#Podział danych na uczące i testowe
podzial = podziel(dane, p=0.5)
#Wybrane atrybuty opisujące
atr=c(5,9)
#Weryfikacja: klasyfikator k-najbliższych sąsiadów - k=1
weryfikuj('knn', dane, podzial, atr, k=1)
#Weryfikacja: klasyfikator k-najbliższych sąsiadów - k=3
weryfikuj('knn', dane, podzial, atr, k=3)
#Weryfikacja: klasyfikator k-najbliższych sąsiadów - k=9
weryfikuj('knn', dane, podzial, atr, k=9)
#Weryfikacja: drzewo decyzyjne - k=50
weryfikuj('drzewo', dane, podzial, atr, k=75)
#Weryfikacja: drzewo decyzyjne - k=10
weryfikuj('drzewo', dane, podzial, atr, k=50)
#Weryfikacja: drzewo decyzyjne - k=1
weryfikuj('drzewo', dane, podzial, atr, k=1)
#Weryfikacja: klasyfikator najbliższego prototypu
weryfikuj('np', dane, podzial, atr, k=1)
#Weryfikacja: naiwny klasyfikator Bayesa
weryfikuj('bayes', dane, podzial, atr, k=1)
#Histogram z ilością błędnych klasyfikacji
pokaz(dane, opis=c(3,7))
pokaz(dane)
#Przygotowanie
source('E:/Users/Michal/Git/ED/eksplo.R')
dane <- read.table("zestaw_22.dat")
#Sprawdzam czy dane trzeba znormalizowac
minima = najmniejsze(dane, opis=c(1,2,3,4,5,6,7,8,9))
zmiennosc = sd(minima)/mean(minima)
#Zmiennosc wyniosla -0.47 więc powinniśmy znormalizować
dane=normalizuj(dane)
#Podział danych na uczące i testowe
podzial = podziel(dane, p=0.5)
#Wybrane atrybuty opisujące
atr=c(3,2)
#Weryfikacja: klasyfikator k-najbliższych sąsiadów - k=1
weryfikuj('knn', dane, podzial, atr, k=1)
#Weryfikacja: klasyfikator k-najbliższych sąsiadów - k=3
weryfikuj('knn', dane, podzial, atr, k=3)
#Weryfikacja: klasyfikator k-najbliższych sąsiadów - k=9
weryfikuj('knn', dane, podzial, atr, k=9)
#Weryfikacja: drzewo decyzyjne - k=50
weryfikuj('drzewo', dane, podzial, atr, k=75)
#Weryfikacja: drzewo decyzyjne - k=10
weryfikuj('drzewo', dane, podzial, atr, k=50)
#Weryfikacja: drzewo decyzyjne - k=1
weryfikuj('drzewo', dane, podzial, atr, k=1)
#Weryfikacja: klasyfikator najbliższego prototypu
weryfikuj('np', dane, podzial, atr, k=1)
#Weryfikacja: naiwny klasyfikator Bayesa
weryfikuj('bayes', dane, podzial, atr, k=1)
#Histogram z ilością błędnych klasyfikacji
pokaz(dane, opis=c(3,7))
pokaz(dane)
#Przygotowanie
source('E:/Users/Michal/Git/ED/eksplo.R')
dane <- read.table("zestaw_22.dat")
#Sprawdzam czy dane trzeba znormalizowac
minima = najmniejsze(dane, opis=c(1,2,3,4,5,6,7,8,9))
zmiennosc = sd(minima)/mean(minima)
#Zmiennosc wyniosla -0.47 więc powinniśmy znormalizować
dane=normalizuj(dane)
#Podział danych na uczące i testowe
podzial = podziel(dane, p=0.7)
#Wybrane atrybuty opisujące
atr=c(3,2)
#Weryfikacja: klasyfikator k-najbliższych sąsiadów - k=1
weryfikuj('knn', dane, podzial, atr, k=1)
#Weryfikacja: klasyfikator k-najbliższych sąsiadów - k=3
weryfikuj('knn', dane, podzial, atr, k=3)
#Weryfikacja: klasyfikator k-najbliższych sąsiadów - k=9
weryfikuj('knn', dane, podzial, atr, k=9)
#Weryfikacja: drzewo decyzyjne - k=50
weryfikuj('drzewo', dane, podzial, atr, k=75)
#Weryfikacja: drzewo decyzyjne - k=10
weryfikuj('drzewo', dane, podzial, atr, k=50)
#Weryfikacja: drzewo decyzyjne - k=1
weryfikuj('drzewo', dane, podzial, atr, k=1)
#Weryfikacja: klasyfikator najbliższego prototypu
weryfikuj('np', dane, podzial, atr, k=1)
#Weryfikacja: naiwny klasyfikator Bayesa
weryfikuj('bayes', dane, podzial, atr, k=1)
#Histogram z ilością błędnych klasyfikacji
pokaz(dane, opis=c(3,7))
pokaz(dane)
#Przygotowanie
source('E:/Users/Michal/Git/ED/eksplo.R')
dane <- read.table("zestaw_22.dat")
#Sprawdzam czy dane trzeba znormalizowac
minima = najmniejsze(dane, opis=c(1,2,3,4,5,6,7,8,9))
zmiennosc = sd(minima)/mean(minima)
#Zmiennosc wyniosla -0.47 więc powinniśmy znormalizować
dane=normalizuj(dane)
#Podział danych na uczące i testowe
podzial = podziel(dane, p=0.5)
#Wybrane atrybuty opisujące
atr=c(6,2)
#Weryfikacja: klasyfikator k-najbliższych sąsiadów - k=1
weryfikuj('knn', dane, podzial, atr, k=1)
#Weryfikacja: klasyfikator k-najbliższych sąsiadów - k=3
weryfikuj('knn', dane, podzial, atr, k=3)
#Weryfikacja: klasyfikator k-najbliższych sąsiadów - k=9
weryfikuj('knn', dane, podzial, atr, k=9)
#Weryfikacja: drzewo decyzyjne - k=50
weryfikuj('drzewo', dane, podzial, atr, k=75)
#Weryfikacja: drzewo decyzyjne - k=10
weryfikuj('drzewo', dane, podzial, atr, k=50)
#Weryfikacja: drzewo decyzyjne - k=1
weryfikuj('drzewo', dane, podzial, atr, k=1)
#Weryfikacja: klasyfikator najbliższego prototypu
weryfikuj('np', dane, podzial, atr, k=1)
#Weryfikacja: naiwny klasyfikator Bayesa
weryfikuj('bayes', dane, podzial, atr, k=1)
#Histogram z ilością błędnych klasyfikacji
pokaz(dane, opis=c(3,7))
pokaz(dane)
pokaz(dane, opis=c(6,2))
x = matrix(c(1,2,3,4),2,2)
x
x = matrix(c(1,2,3,4,5,6),2,3)
x
x = matrix(c(1,2,3,4,5,6),2,3)
y = c('red','blue', 'yellow')
y
w
x
plot(x,y)
plot(y,x)
hist(x, y)
hist(x)
hist
help(hist)
bledne - testowe
bledne_testowe = c(1,2,3)
klasyfikatory = c('jeden', 'dwa', 'trzy')
plot(bledne_testowe, klasyfikatory)
klasyfikatory
bledne_testowe
hist(klasyfikatory, bledne_testowe)
hist(bledne_testowe)
hist(bledne_testowe, klasyfikatory)
hist(bledne_testowe, lab=klasyfikatory)
help(hist)
hist(bledne_testowe, labels= TRUE)
plot(bledne_testowe)
plot(bledne_testowe
))
scatterplot(bledne_testowe)
scatterplot(bledne_testowe, klasyfikatory)
scatterplot(bledne_testowe, as.numeric(klasyfikatory)
)
scatterplot(bledne_testowe, as.numericarray(klasyfikatory)
)
scatterplot(bledne_testowe, as.numeric(klasyfikatory)
)
plot(bledne_testowe)
help(plot)
help(plot, type='h')
help(plot, type="h")
help(plot, type='h')
plot(bledne_testowe, type='h')
bledne_testowe = matrix(c(1,2,3,4,5,6),2,3)
plot(bledne_testowe, type='h')
bledne_testowe
plot(bledne_testowe, type='h')
plot(bledne_testowe[,1], type='h')
plot(bledne_testowe[,1:3], type='h')
bledne_testowe=c(1,2,3)
plot(bledne_testowe[,1:3], type='h')
plot(bledne_testowe, type='h')
help(plot)
plot(bledne_testowe, type='h')
text(bledne_testowe, ,klasyfikatory)
help(text)
text(bledne_testowe, ,klasyfikatory, col='red')
scatter3d(bledne_testowe)
scatter3d(bledne_testowe, bledne_testowe)
scatter3d(bledne_testowe, bledne_testowe, bledne_testowe)
scatter3d(bledne_testowe, bledne_testowe, bledne_testowe)
scatter3d(bledne_testowe, bledne_testowe, bledne_testowe)
scatter.hist(bledne_testowe)
bledne_testowe = matrix(c(1,2,3,4),2,2)
scatter.hist(bledne_testowe)
ggplot(data.frame(animals),aes(x=animals))
ggplot(data.frame(animals),aes(x=klasyfikatory))
ggplot(bledne_testowe,aes(x=klasyfikatory))
bledne_testowe = c(1,2,3)
ggplot(bledne_testowe,aes(x=klasyfikatory))
library(ggplot2)
install(ggplot2)
install.packages("ggplot2")
ggplot(bledne_testowe,aes(x=klasyfikatory))
library(ggplot2)
ggplot(bledne_testowe,aes(x=klasyfikatory))
dat <- data.frame(fac = rep(klasyfikatory[1:3], times = c(1,2,3)))
ggplot(dat,aes(x=klasyfikatory))
ggplot(data.frame(),aes(x=dat))
ggplot(data.frame(dat),aes(x=dat))
ggplot(data.frame(dat),aes(x=dat))
ggplot(data.frame(dat),aes(x=dat))
dat <- rep(klasyfikatory[1:3], times = c(1,2,3))
dat
ggplot(data.frame(dat),aes(x=dat))
ggplot(data.frame(dat),aes(x=dat))
ggplot(data.frame(dat),aes(x=dat))
ggp + geom_histogram(fill="lightgreen")
ggp -< ggplot(data.frame(dat),aes(x=dat))
ggp <- ggplot(data.frame(dat),aes(x=dat))
ggp + geom_histogram(fill="lightgreen")
ggp + geom_histogram(fill="lightblue",aes(y=..count../sum(..count..)))
count(x)
count(dat)
ggplot(data.frame(dat),aes(x=dat))
plot(dat)
plot(table(dat)
)
plot(table(dat), col=red
)
plot(table(dat), col='red'
)
testowe <- rep(c('knn1', 'knn3', 'knn4', 'drzewo75', 'drzewo50', 'drzewo1', 'np', 'bayes'), times = c(1,2,3))
testowe <- rep(c('knn1', 'knn3', 'knn4', 'drzewo75', 'drzewo50', 'drzewo1', 'np', 'bayes'), times = c(1,2,3,4,5,6,7,8))
testowe
testowe <- rep(c('knn1', 'knn3', 'knn4', 'drzewo75', 'drzewo50', 'drzewo1', 'np', 'bayes'), times = c(1,2,3,4,5,6,7,8))
plot(testowe)
plot(table(testowe)
)
sort(testowe)
plot(table(testowe)
plot(sort(table(testowe))))
plot(sort(table(testowe)))
plot(sort(table(testowe)), t='h')
plot(sort(table(testowe)), type='h')
plot(table(testowe))
testowe_t = c(1,2,3,4,5,6,7,8)
testowe_t = testowe_t/10
testowe <- rep(c('knn1', 'knn3', 'knn4', 'drzewo75', 'drzewo50', 'drzewo1', 'np', 'bayes'), times = testowe_t)
plot(table(testowe), col='red')
testowe_t = c(1,2,3,4,5,6,7,8)
testowe_t = testowe_t/10
testowe <- rep(c('knn1', 'knn3', 'knn4', 'drzewo75', 'drzewo50', 'drzewo1', 'np', 'bayes'), times = testowe_t)
plot(table(testowe))
testowe <- rep(c('knn1', 'knn3', 'knn4', 'drzewo75', 'drzewo50', 'drzewo1', 'np', 'bayes'), times = testowe_t)
plot(table(testowe))
testowe_t = c(1,2,3,4,5,6,7,8)
testowe <- rep(c('knn1', 'knn3', 'knn4', 'drzewo75', 'drzewo50', 'drzewo1', 'np', 'bayes'), times = testowe_t)
plot(table(testowe))
testowe_t = c(1,2,3,4,5,6,7,8)
testowe <- rep(c('knn1', 'knn3', 'knn9', 'drzewo75', 'drzewo50', 'drzewo1', 'np', 'bayes'), times = testowe_t)
plot(table(testowe))
treningowe_t = c(1,2,3,4,5,6,7,8)
treningowe <- rep(c('knn1', 'knn3', 'knn9', 'drzewo75', 'drzewo50', 'drzewo1', 'np', 'bayes'), times = testowe_t)
plot(table(treningowe), col='red')
testowe_t = c(2,3,4,5,6,7,8,9)
testowe <- rep(c('knn1', 'knn3', 'knn9', 'drzewo75', 'drzewo50', 'drzewo1', 'np', 'bayes'), times = testowe_t)
plot(table(testowe), col='blue'')
treningowe_t = c(1,2,3,4,5,6,7,8)
treningowe <- rep(c('knn1', 'knn3', 'knn9', 'drzewo75', 'drzewo50', 'drzewo1', 'np', 'bayes'), times = testowe_t)
plot(table(treningowe), col='red')
testowe_t = c(2,3,4,5,6,7,8,9)
testowe <- rep(c('knn1', 'knn3', 'knn9', 'drzewo75', 'drzewo50', 'drzewo1', 'np', 'bayes'), times = testowe_t)
plot(table(testowe), col='blue')
testowe_t = c(2,3,4,5,6,7,8,9)
testowe <- rep(c('knn1', 'knn3', 'knn9', 'drzewo75', 'drzewo50', 'drzewo1', 'np', 'bayes'), times = testowe_t)
plot(table(testowe), table(testowe), col='blue')
treningowe_t = c(1,2,3,4,5,6,7,8)
treningowe <- rep(c('knn1', 'knn3', 'knn9', 'drzewo75', 'drzewo50', 'drzewo1', 'np', 'bayes'), times = testowe_t)
hist(table(treningowe), col='red')
treningowe_t = c(1,2,3,4,5,6,7,8)
treningowe <- rep(c('knn1', 'knn3', 'knn9', 'drzewo75', 'drzewo50', 'drzewo1', 'np', 'bayes'), times = testowe_t)
plot(table(treningowe), col='red', t='h')
treningowe_t = c(1,2,3,4,5,6,7,8)
treningowe <- rep(c('knn1', 'knn3', 'knn9', 'drzewo75', 'drzewo50', 'drzewo1', 'np', 'bayes'), times = testowe_t)
plot(table(treningowe), col='red')
help(plot)
barplot(table(dat), main = "barplot")
barplot(table(testowe), main = "Błędna ilość w testowych")
barplot(table(testowe), main = "Błędna ilość w testowych", col='red')
treningowe_t = c(1,2,3,4,5,6,7,8)
treningowe <- rep(c('knn1', 'knn3', 'knn9', 'drzewo75', 'drzewo50', 'drzewo1', 'np', 'bayes'), times = testowe_t)
barplot(table(testowe), main = "Błędna ilość w testowych", col='orange')
testowe_t = c(2,3,4,5,6,7,8,9)
testowe <- rep(c('knn1', 'knn3', 'knn9', 'drzewo75', 'drzewo50', 'drzewo1', 'np', 'bayes'), times = testowe_t)
barplot(table(testowe), main = "Błędna ilość w testowych", col='blue')
testowe_t = c(2,3,4,5,6,7,8,9)
testowe <- rep(c('knn1', 'knn3', 'knn9', 'drzewo75', 'drzewo50', 'drzewo1', 'np', 'bayes'), times = testowe_t)
barplot(table(testowe), main = "Błędna ilość w testowych", col='green')
treningowe_t = c(1,2,3,4,5,6,7,8)
treningowe <- rep(c('knn1', 'knn3', 'knn9', 'drzewo75', 'drzewo50', 'drzewo1', 'np', 'bayes'), times = testowe_t)
barplot(table(testowe), main = "Błędna ilość w testowych", col='orange')
testowe_t = c(2,3,4,5,6,7,8,9)
testowe <- rep(c('knn1', 'knn3', 'knn9', 'drzewo75', 'drzewo50', 'drzewo1', 'np', 'bayes'), times = testowe_t)
barplot(table(testowe), main = "Błędna ilość w testowych", col='lightblue')
uczace_t = c(0,11,9,8,8,8,21,22)
uczace <- rep(c('knn1', 'knn3', 'knn9', 'drzewo75', 'drzewo50', 'drzewo1', 'np', 'bayes'), times = testowe_t)
barplot(table(testowe), main = "Błędna klasyfikacja dla danych uczących", col='orange')
testowe_t = c(15,9,10,14,14,20,22,15)
testowe <- rep(c('knn1', 'knn3', 'knn9', 'drzewo75', 'drzewo50', 'drzewo1', 'np', 'bayes'), times = testowe_t)
barplot(table(testowe), main = "Błędna klasyfikacja dla danych testowych", col='lightblue')
uczace_t = c(0,11,9,8,8,8,21,22)
uczace <- rep(c('knn1', 'knn3', 'knn9', 'drzewo75', 'drzewo50', 'drzewo1', 'np', 'bayes'), times = testowe_t)
barplot(table(testowe), main = "Błędna klasyfikacja dla danych uczących", col='orange')
uczace_t = c(0,11,9,8,8,8,21,22)
uczace <- rep(c('knn1', 'knn3', 'knn9', 'drzewo75', 'drzewo50', 'drzewo1', 'np', 'bayes'), times = testowe_t)
barplot(table(testowe), main = "Błędna klasyfikacja dla danych uczących", col='orange')
uczace_t = c(0,11,9,8,8,8,21,22)
uczace <- rep(c('knn1', 'knn3', 'knn9', 'drzewo75', 'drzewo50', 'drzewo1', 'np', 'bayes'), times = testowe_t)
barplot(table(testowe), main = "Błędna klasyfikacja dla danych uczących", col='orange')
uczace_t = c(0,11,9,8,8,8,21,22)
uczace <- rep(c('knn1', 'knn3', 'knn9', 'drzewo75', 'drzewo50', 'drzewo1', 'np', 'bayes'), times = testowe_t)
barplot(table(testowe), col='orange')
uczace_t = c(0,11,9,8,8,8,21,22)
uczace <- rep(c('knn1', 'knn3', 'knn9', 'drzewo75', 'drzewo50', 'drzewo1', 'np', 'bayes'), times = testowe_t)
barplot(table(testowe), main = "Błędna klasyfikacja dla danych uczących", col='orange')
uczace_t = c(0,11,9,8,8,8,21,23)
uczace <- rep(c('knn1', 'knn3', 'knn9', 'drzewo75', 'drzewo50', 'drzewo1', 'np', 'bayes'), times = testowe_t)
barplot(table(testowe), main = "Błędna klasyfikacja dla danych uczących", col='orange')
uczace_t = c(0,11,9,8,8,8,21,50)
uczace <- rep(c('knn1', 'knn3', 'knn9', 'drzewo75', 'drzewo50', 'drzewo1', 'np', 'bayes'), times = testowe_t)
barplot(table(testowe), main = "Błędna klasyfikacja dla danych uczących", col='orange')
uczace_t = c(0,11,9,8,8,8,21,22)
uczace <- rep(c('knn1', 'knn3', 'knn9', 'drzewo75', 'drzewo50', 'drzewo1', 'np', 'bayes'), times = testowe_t)
barplot(table(testowe), main = "Błędna klasyfikacja dla danych uczących", col='orange')
testowe_t = c(15,9,10,14,14,20,22,15)
testowe <- rep(c('knn1', 'knn3', 'knn9', 'drzewo75', 'drzewo50', 'drzewo1', 'np', 'bayes'), times = testowe_t)
barplot(table(testowe), main = "Błędna klasyfikacja dla danych testowych", col='lightblue')
uczace_t = c(0,11,9,8,8,8,21,22)
uczace <- rep(c('knn1', 'knn3', 'knn9', 'drzewo75', 'drzewo50', 'drzewo1', 'np', 'bayes'), times = testowe_t)
barplot(table(testowe), main = "Błędna klasyfikacja dla danych uczących", col='orange')
testowe_t = c(15,9,10,14,14,20,22,15)
testowe <- rep(c('knn1', 'knn3', 'knn9', 'drzewo75', 'drzewo50', 'drzewo1', 'np', 'bayes'), times = testowe_t)
barplot(table(testowe), main = "Błędna klasyfikacja dla danych testowych", col='lightblue')
uczace_t = c(0,11,9,8,8,8,21,22)
uczace <- rep(c('knn1', 'knn3', 'knn9', 'drzewo75', 'drzewo50', 'drzewo1', 'np', 'bayes'), times = testowe_t)
barplot(table(uczace), main = "Błędna klasyfikacja dla danych uczących", col='orange')
testowe_t = c(15,9,10,14,14,20,22,15)
testowe <- rep(c('knn1', 'knn3', 'knn9', 'drzewo75', 'drzewo50', 'drzewo1', 'np', 'bayes'), times = testowe_t)
barplot(table(testowe), main = "Błędna klasyfikacja dla danych testowych", col='lightblue')
uczace_t = c(0,11,9,8,8,8,21,22)
uczace <- rep(c('knn1', 'knn3', 'knn9', 'drzewo75', 'drzewo50', 'drzewo1', 'np', 'bayes'), times = uczace_t)
barplot(table(uczace), main = "Błędna klasyfikacja dla danych uczących", col='orange')
testowe_t = c(15,9,10,14,14,20,22,15)
testowe <- rep(c('knn1', 'knn3', 'knn9', 'drzewo75', 'drzewo50', 'drzewo1', 'np', 'bayes'), times = testowe_t)
barplot(table(testowe), main = "Błędna klasyfikacja dla danych testowych", col='lightblue')
hist(table(uczace), xlab = "Frequency of Level Occurrence", main = "")
uczace_t = c(0,11,9,8,8,8,21,22)
uczace <- rep(c('knn1', 'knn3', 'knn9', 'drzewo75', 'drzewo50', 'drzewo1', 'np', 'bayes'), times = uczace_t)
hist(table(uczace), xlab = "Frequency of Level Occurrence", main = "")
e), main = "Błędna klasyfikacja dla danych uczących", col='orange')
hist(table(uczace))
, main = "Błędna klasyfikacja dla danych uczących", col='orange')
ggplot(table(uczace))
ggplot(uczace)
pokaz(dane)
#Wybrane atrybuty opisujące
atr=c(7,8)
#Weryfikacja: klasyfikator k-najbliższych sąsiadów - k=1
weryfikuj('knn', dane, podzial, atr, k=1)
#Weryfikacja: klasyfikator k-najbliższych sąsiadów - k=3
weryfikuj('knn', dane, podzial, atr, k=3)
#Weryfikacja: klasyfikator k-najbliższych sąsiadów - k=9
weryfikuj('knn', dane, podzial, atr, k=9)
#Weryfikacja: drzewo decyzyjne - k=50
weryfikuj('drzewo', dane, podzial, atr, k=75)
#Weryfikacja: drzewo decyzyjne - k=10
weryfikuj('drzewo', dane, podzial, atr, k=50)
#Weryfikacja: drzewo decyzyjne - k=1
weryfikuj('drzewo', dane, podzial, atr, k=1)
#Weryfikacja: klasyfikator najbliższego prototypu
weryfikuj('np', dane, podzial, atr, k=1)
#Weryfikacja: naiwny klasyfikator Bayesa
weryfikuj('bayes', dane, podzial, atr, k=1)
klasyfikuj('knn', dane, podzial, atr, k=1)
klasyfikuj('knn', dane, podzial,k=1)
granice('np', dane, podzial, atr)
granice('np', dane, podzial, 8,8)
granice('np', dane, podzial, 8,2)
pokaz(dane)
granice('np', dane, podzial, 8,7)
pokaz(dane)
#Weryfikacja: Przypadek 1 - silne atrybuty
weryfikuj('np', dane, podzial, c(7,8), k=1)
#Weryfikacja: Przypadek 2 - słabe atrybuty
weryfikuj('np', dane, podzial, c(2,3), k=1)
#Weryfikacja: Przypadek 3 - duża ilośc atrybutów
weryfikuj('np', dane, podzial, c(1,3,5,7,9), k=1)
#Weryfikacja: Przypadek 4 - jeden atrybut
weryfikuj('np', dane, podzial, c(1,3,5,7,9), k=1)
#Weryfikacja: Przypadek 1 - silne atrybuty
weryfikuj('np', dane, podzial, c(7,8), k=1)
#Weryfikacja: Przypadek 2 - słabe atrybuty
weryfikuj('np', dane, podzial, c(2,3), k=1)
#Weryfikacja: Przypadek 3 - duża ilośc atrybutów
weryfikuj('np', dane, podzial, c(1,3,5,7,9), k=1)
#Weryfikacja: Przypadek 4 - jeden atrybut
weryfikuj('np', dane, podzial, c(1,3,5,7,9), k=1)
#Podział danych na uczące i testowe
podzial = podziel(dane, p=0.5)
#Weryfikacja: Przypadek 1 - atrybuty silnie wpływające
weryfikuj('np', dane, podzial, c(7,8), k=1)
#Weryfikacja: Przypadek 2 - atrybuty słabo wpływające
weryfikuj('np', dane, podzial, c(2,3), k=1)
#Weryfikacja: Przypadek 3 - duża ilośc atrybutów
weryfikuj('np', dane, podzial, c(1,3,5,7,9), k=1)
#Weryfikacja: Przypadek 4 - jeden atrybut
weryfikuj('np', dane, podzial, c(3), k=1)
#Weryfikacja: Przypadek 1 - atrybuty silnie wpływające
weryfikuj('np', dane, podzial, c(7,8), k=1)
#Weryfikacja: Przypadek 2 - atrybuty słabo wpływające
weryfikuj('np', dane, podzial, c(2,3), k=1)
#Weryfikacja: Przypadek 3 - duża ilośc atrybutów
weryfikuj('np', dane, podzial, c(1,3,5,7,9), k=1)
#Weryfikacja: Przypadek 4 - trzy atrybuty
weryfikuj('np', dane, podzial, c(3,8,2), k=1)
#Weryfikacja: Przypadek 1 - atrybuty silnie wpływające
weryfikuj('np', dane, podzial, c(7,8))
#Weryfikacja: Przypadek 2 - atrybuty słabo wpływające
weryfikuj('np', dane, podzial, c(2,3))
#Weryfikacja: Przypadek 3 - duża ilośc atrybutów
weryfikuj('np', dane, podzial, c(1,3,5,7,9))
#Weryfikacja: Przypadek 4 - trzy atrybuty
weryfikuj('np', dane, podzial, c(3,8,2))
#Przygotowanie
source('E:/Users/Michal/Git/ED/eksplo.R')
dane <- read.table("zestaw_22.dat")
#Sprawdzam czy dane trzeba znormalizowac
minima = najmniejsze(dane, opis=c(1,2,3,4,5,6,7,8,9))
zmiennosc = sd(minima)/mean(minima)
#Zmiennosc wyniosla -0.47 więc powinniśmy znormalizować
dane=normalizuj(dane)
#Podział danych na uczące i testowe
podzial = podziel(dane, p=0.5)
#Weryfikacja: Przypadek 1 - atrybuty silnie wpływające
weryfikuj('np', dane, podzial, c(7,8))
#Weryfikacja: Przypadek 2 - atrybuty słabo wpływające
weryfikuj('np', dane, podzial, c(2,3))
#Weryfikacja: Przypadek 3 - duża ilośc atrybutów
weryfikuj('np', dane, podzial, c(1,3,5,7,9))
#Weryfikacja: Przypadek 4 - trzy atrybuty
weryfikuj('np', dane, podzial, c(3,8,2))
#Wybrane atrybuty opisujące
atr=c(7,8)
#Weryfikacja: klasyfikator k-najbliższych sąsiadów - k=1
weryfikuj('knn', dane, podzial, atr, k=1)
granice
#Weryfikacja: klasyfikator k-najbliższych sąsiadów - k=3
weryfikuj('knn', dane, podzial, atr, k=3)
#Weryfikacja: klasyfikator k-najbliższych sąsiadów - k=9
weryfikuj('knn', dane, podzial, atr, k=9)
#Weryfikacja: drzewo decyzyjne - k=50
weryfikuj('drzewo', dane, podzial, atr, k=75)
#Weryfikacja: drzewo decyzyjne - k=10
weryfikuj('drzewo', dane, podzial, atr, k=50)
#Weryfikacja: drzewo decyzyjne - k=1
weryfikuj('drzewo', dane, podzial, atr, k=1)
#Weryfikacja: klasyfikator najbliższego prototypu
weryfikuj('np', dane, podzial, atr, k=1)
#Weryfikacja: naiwny klasyfikator Bayesa
weryfikuj('bayes', dane, podzial, atr, k=1)
#Weryfikacja: Przypadek 1 - atrybuty silnie wpływające
weryfikuj('np', dane, podzial, c(7,8))
#Weryfikacja: Przypadek 2 - atrybuty słabo wpływające
weryfikuj('np', dane, podzial, c(2,6))
#Weryfikacja: Przypadek 3 - duża ilośc atrybutów
weryfikuj('np', dane, podzial, c(1,3,5,7,9))
#Weryfikacja: Przypadek 4 - trzy atrybuty
weryfikuj('np', dane, podzial, c(3,6,2))
#Weryfikacja: Przypadek 1 - atrybuty silnie wpływające
weryfikuj('np', dane, podzial, c(7,8))
#Weryfikacja: Przypadek 2 - atrybuty słabo wpływające
weryfikuj('np', dane, podzial, c(2,6))
#Weryfikacja: Przypadek 3 - duża ilośc atrybutów
weryfikuj('np', dane, podzial, c(1,3,5,7,9))
#Weryfikacja: Przypadek 4 - trzy atrybuty
weryfikuj('np', dane, podzial, c(3,6,2))
